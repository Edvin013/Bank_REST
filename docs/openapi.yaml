# Здесь будет OpenAPI описание всех доступных эндпоинтов и моделей данных.

openapi: 3.0.0
info:
  title: Bank Cards Management API
  description: REST API для управления банковскими картами с ролевым доступом
  version: 1.0.0
  contact:
    name: API Support
    email: support@bankcards.com

servers:
  - url: http://localhost:8080
    description: Development server

security:
  - bearerAuth: []

paths:
  /api/auth/login:
    post:
      tags:
        - Authentication
      summary: Аутентификация пользователя
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Успешная аутентификация
          content:
            text/plain:
              schema:
                type: string
                description: JWT токен
        '401':
          description: Неверные учетные данные

  /api/cards:
    get:
      tags:
        - Cards
      summary: Получить все карты (только для ADMIN)
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Список всех карт
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Card'
        '403':
          description: Доступ запрещен
    post:
      tags:
        - Cards
      summary: Создать новую карту (только для ADMIN)
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CardRequest'
      responses:
        '201':
          description: Карта создана
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Card'
        '403':
          description: Доступ запрещен

  /api/cards/{id}:
    get:
      tags:
        - Cards
      summary: Получить карту по ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Детали карты
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Card'
        '404':
          description: Карта не найдена
        '403':
          description: Доступ запрещен

  /api/cards/my:
    get:
      tags:
        - Cards
      summary: Получить свои карты (для USER)
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 0
        - name: size
          in: query
          schema:
            type: integer
            default: 10
      responses:
        '200':
          description: Список карт пользователя
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Card'

  /api/cards/transfer:
    post:
      tags:
        - Cards
      summary: Перевод между своими картами
      parameters:
        - name: fromCardId
          in: query
          required: true
          schema:
            type: integer
            format: int64
        - name: toCardId
          in: query
          required: true
          schema:
            type: integer
            format: int64
        - name: amount
          in: query
          required: true
          schema:
            type: number
            format: double
      responses:
        '200':
          description: Перевод выполнен успешно
        '400':
          description: Ошибка при переводе

  /api/cards/block:
    post:
      tags:
        - Cards
      summary: Заблокировать карту
      parameters:
        - name: cardId
          in: query
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Карта заблокирована
        '400':
          description: Ошибка при блокировке

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    LoginRequest:
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
          example: admin
        password:
          type: string
          example: admin123

    Card:
      type: object
      properties:
        id:
          type: integer
          format: int64
        cardNumber:
          type: string
          description: Маскированный номер карты
          example: "**** **** **** 1234"
        owner:
          type: string
          example: "John Doe"
        expirationDate:
          type: string
          format: date
          example: "2025-12-31"
        status:
          type: string
          enum: [ACTIVE, BLOCKED, EXPIRED]
        balance:
          type: number
          format: double
          example: 1000.50

    CardRequest:
      type: object
      required:
        - cardNumber
        - owner
        - expirationDate
        - balance
      properties:
        cardNumber:
          type: string
          example: "1234567890123456"
        owner:
          type: string
          example: "John Doe"
        expirationDate:
          type: string
          format: date
          example: "2025-12-31"
        balance:
          type: number
          format: double
          example: 1000.00
